// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package discover

import (
	"sync"
)

// Ensure, that DiscoverMock does implement Discover.
// If this is not the case, regenerate this file with moq.
var _ Discover = &DiscoverMock{}

// DiscoverMock is a mock implementation of Discover.
//
// 	func TestSomethingThatUsesDiscover(t *testing.T) {
//
// 		// make and configure a mocked Discover
// 		mockedDiscover := &DiscoverMock{
// 			HooksFunc: func() ([]Hook, error) {
// 				panic("mock out the Hooks method")
// 			},
// 		}
//
// 		// use mockedDiscover in code that requires Discover
// 		// and then make assertions.
//
// 	}
type DiscoverMock struct {
	// HooksFunc mocks the Hooks method.
	HooksFunc func() ([]Hook, error)

	// calls tracks calls to the methods.
	calls struct {
		// Hooks holds details about calls to the Hooks method.
		Hooks []struct {
		}
	}
	lockHooks sync.RWMutex
}

// Hooks calls HooksFunc.
func (mock *DiscoverMock) Hooks() ([]Hook, error) {
	callInfo := struct {
	}{}
	mock.lockHooks.Lock()
	mock.calls.Hooks = append(mock.calls.Hooks, callInfo)
	mock.lockHooks.Unlock()
	if mock.HooksFunc == nil {
		var (
			hooksOut []Hook
			errOut   error
		)
		return hooksOut, errOut
	}
	return mock.HooksFunc()
}

// HooksCalls gets all the calls that were made to Hooks.
// Check the length with:
//     len(mockedDiscover.HooksCalls())
func (mock *DiscoverMock) HooksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHooks.RLock()
	calls = mock.calls.Hooks
	mock.lockHooks.RUnlock()
	return calls
}
